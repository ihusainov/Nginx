# For exporting data to prometheus you need install lua module in nginx

#lua_package_path       "/etc/nginx/lua/?.lua";
lua_package_path "/usr/local/lib/lua/?.lua;;";

init_by_lua '
        prometheus = require("prometheus").init("prometheus_metrics")
        metric_requests = prometheus:counter("nginx_http_requests_total", "Number of HTTP requests", {"host", "status", "method"})
        metric_latency = prometheus:histogram("nginx_http_request_duration_seconds", "HTTP request latency", {"host", "status", "method"})
        metric_connections = prometheus:gauge("nginx_http_connections", "Number of HTTP connections", {"state"})
        metric_upstream_requests = prometheus:counter("nginx_upstream_requests_total", "Number of requests to upstrem", {"host", "addr", "status"})
        metric_upstream_latency = prometheus:histogram("nginx_upstream_request_duration_seconds", "Upstream request latency", {"host", "addr", "status"})
';

log_by_lua '
        if      ngx.var.monitor_host == nil or ngx.var.monitor_host == "" then
                return
        end


        local function split(str)
                local array = {}
                for mem in string.gmatch(str, "([^, ]+)") do
                        table.insert(array, mem)
                end
                return array
        end

        local function getWithIndex(str, idx)
                if str == nil then
                        return nil
                end
                return split(str)[idx]
        end

        local host = ngx.var.host:gsub("^www.","")
        metric_requests:inc(1, {host, ngx.var.status, ngx.var.request_method})
        metric_latency:observe(tonumber(ngx.var.request_time), {host, ngx.var.status, ngx.var.request_method})

        local   upstream_addr   =       ngx.var.upstream_addr
        if upstream_addr        ~= nil and upstream_addr:len() > 0 then
                local   addrs   =       split(upstream_addr)
                if table.getn(addrs) > 1 then
                        local upstream_response_time = split(ngx.var.upstream_response_time)
                        local upstream_response_status = split(ngx.var.upstream_status)
                        for idx, addr in ipairs(addrs) do
                                metric_upstream_requests:inc(1, {host, addr, upstream_response_status[idx]})
                                metric_upstream_latency:observe(tonumber(upstream_response_time[idx]), {host, addr, upstream_response_status[idx]})
                        end
                else
                        metric_upstream_requests:inc(1, {host, addrs[1], ngx.var.upstream_status})
                        metric_upstream_latency:observe(tonumber(ngx.var.upstream_response_time), {host, addrs[1], ngx.var.upstream_status})
                end
        end
';
